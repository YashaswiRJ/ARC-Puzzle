Hey DeepSeek, let’s tackle a structured reasoning challenge!
You're exceptionally skilled at pattern recognition and logical reasoning, so I have an exciting task for you. Your goal is to convert a pixel matrix into a tree representation using infix notation.

Understanding the Problem:
The input is a pixel matrix of size at most 30x30, where digits (0-9) represent colors.
The number 0 represents the background (if applicable).
Each distinct shape is formed by connected non-zero pixels.
Some shapes are nested within others, forming a hierarchical structure.
Defining the Tree Representation:
To represent the matrix as a tree:

Identify distinct shapes using connected non-zero pixels.
Find the minimal bounding rectangle enclosing each shape.
Each shape becomes a tree node with attributes:
Color-digit
Bounding box dimensions
Top-left corner position
Child details (nested shapes inside the bounding box)
Hierarchy Rules:
A shape (child) must be fully contained within its parent's bounding box.
Children always have a higher z-index than their parent, meaning if two shapes overlap, the child’s color takes precedence over the parent’s.
Tree Representation Using Infix Notation
In graph theory and computer science, infix notation represents trees compactly using parentheses for child nodes and commas to separate siblings.

Example:
Consider this matrix:

00000000  
01111110  
01221310  
01111310  
01111110  
00000000  
Here, we identify three shapes:

A (Largest enclosing shape)
B (Enclosed inside A)
C (Another enclosed shape)
Tree Representation in Infix Notation:
 
 
 
A(B, C)
where:

A is the root (largest shape).
B and C are children inside A.
If two shapes overlap at a pixel, the child’s color takes precedence over the parent.
Similarly, for a tree 3(2, 8(1, 9)), the structure is:

Root: 3
Children: 2 and 8
8 has children 1 and 9
In infix notation:

Parentheses indicate hierarchy (nested structures).
Commas separate siblings under the same parent.
Nodes without children appear alone.

Examples of Matrix to Tree Conversion

Example 1
Pixel Matrix:
 
 
000000000000000
002222200011100
002888200018100
002888200011100
002888200000000
002888200000000
002222200000000
000000000000000
000000003333333
000000003888883
000000003888883
000000003888883
000000003333333
Converted Tree:
Canvas Details: Root has 3 children A, B, C

Canvas background color: '0' (black)
Canvas size: 13x15
Root Node (Root):
Color: black
Size: 13x15
Number of children: 3
Children: A, B, C
Child Nodes:

Node A:

Child: D
Color: '2' (red)
Shape: Rectangle
Dimensions: 6×5
Top-left cell: (1, 2)
Blueprint:
 
 
222222
222222
222222
222222
222222
222222
Node B:

Child: E
Color: '1' (blue)
Shape: Rectangle
Dimensions: 3×3
Top-left cell: (1, 10)
Blueprint:
 
 
111
111
111
Node C:

Child: F
Color: '3' (green)
Shape: Rectangle
Dimensions: 5×7
Top-left cell: (8, 8)
Blueprint:
 
 
3333333
3333333
3333333
3333333
3333333
Node D:

Child: None
Color: '8' (cyan)
Shape: Rectangle
Dimensions: 4×3
Top-left cell: (2, 3)
Blueprint:
 
 
888
888
888
888
Node E:

Child: None
Color: '8' (cyan)
Shape: Rectangle
Dimensions: 1×1
Top-left cell: (2, 11)
Blueprint:
 
 
8
Node F:

Child: None
Color: '8' (cyan)
Shape: Rectangle
Dimensions: 3×5
Top-left cell: (9, 9)
Blueprint:
 
 
88888
88888
88888
Infix Notation:
s 
 
 
Root(A(D), B(E), C(F))
Example 2
Pixel Matrix:
 
 
0000000000000000
0888800000000000
0888800000000000
0888803333333000
0000003333333000
0000003333333000
0000003333333000
0000003333333000
0000000000000000
0000000000000000
0066666660007770
0066666660007770
0066666660007770
0066666660007770
0000000000007770
0000000000000000
0000000000000000
0000000000000000
Converted Tree:
Canvas Details: Root has 4 children A, B, C, D

Canvas background color: '0' (black)
Canvas size: 18x16
Root Node (Root):
Color: black
Size: 18x16
Number of children: 4
Children: A, B, C, D
Child Nodes:

Node A:

Child: None
Color: '8' (cyan)
Shape: Rectangle
Dimensions: 3×4
Top-left cell: (1, 1)
Blueprint:
yaml
 
 
8888
8888
8888
Node B:

Child: None
Color: '3' (green)
Shape: Rectangle
Dimensions: 5×7
Top-left cell: (3, 6)
Blueprint:
 
 
3333333
3333333
3333333
3333333
3333333
Node C:

Child: None
Color: '6' (pink)
Shape: Rectangle
Dimensions: 4×7
Top-left cell: (10, 2)
Blueprint:
 
 
6666666
6666666
6666666
6666666
Node D:

Child: None
Color: '7' (orange)
Shape: Rectangle
Dimensions: 5×3
Top-left cell: (10, 12)
Blueprint:
 
 
777
777
777
777
777
Infix Notation:
 

Root(A, B, C, D)
 
Input: A pixel matrix where each cell represents a color.
Output: A tree structure where each node represents a rectangular region with the same color.
Rules:
Identify all connected rectangular regions with the same color.
Represent the hierarchy of these regions.
For each region, provide:
Color
Shape (Rectangle)
Top-left position
Blueprint
Output the tree representation in both structured format and infix notation. Naming in infix notation should not be done based on colors to avoid confusion.
Now, generate the tree representation for the following pixel matrix:
